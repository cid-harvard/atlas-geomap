{"version":3,"sources":["../../src/chart/mapResetZoomPan.ts","../../src/chart/getMapControls.ts","../../src/chart/Utils.ts","../../src/chart/index.tsx","../../src/chart/styling.ts","../../src/chart/Legend.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["getZoomPanReset","options","button","document","that","zoomToFitUSA","view","zoom","center","duration","easing","inAndOut","element","Control","target","ResetControl","ol_inherits","childCtor","Object","parentCtor","defaultZoomLevel","defaultCenterCoords","getResetControl","attribution","zoomOptions","className","projTransform","Root","styled","el","rememberEl","onMouseLeaveMap","hovered","x","y","actuallySendOutTooltipInfo","info","id","sendOutTooltipInfo","throttle","onMouseEnterFeature","offsetX","offsetY","countryData","hideTooltip","tagName","feature","featureId","retrievedFeatureData","onMouseClickFeature","showDetailOverlay","componentDidMount","props","this","componentDidUpdate","nextProps","prevProps","setSizeAndSetupMap","olMap","width","size","height","View","minZoom","controls","getMapControls","actuallySetSizeAndSetupMap","pixel","evt","drawVectorLayer","newVectorLayer","geoJSONData","parsedFeatures","GeoJSON","featureProjection","featureSource","features","wrapX","Vector","source","style","retrievedDatumForCountry","color","Style","fill","Fill","stroke","Stroke","actuallyDrawVectorLayer","vectorLayer","render","ref","onMouseLeave","React","Component","styles","css","log10","Math","formatTradeValue","input","numSignificantDigitsInInput","n","String","getSignificantDigitCount","numSignificantDigitsInOutput","format","TickValue","graphHeight","TickMark","SelectedCountry","ColorBar","spectrumScale","scaleLinear","spectrumStartPct","spectrumEndPct","spectrumGradientString","legendEnd","value","colorRangeStart","colorRangeEnd","getCSSLinearGradient","getScaleAndTicksForTickLabels","scale","scaleLog","domainStart","legendStartX","numberOfTicks","domainStartOrderOfMagnitude","getOrdersOfMagnitudeDifference","rawTickValues","tickValues","first","last","domainEnd","showSelectedCountry","tickValueElems","left","key","tickElems","selectedCountryLabel","PureComponent","JSON","data","showTooltip","onCountryClick","domainSpectrumEnd","domainSpectrumStart","rangeEnd","rangeStart","chartRootEl","useRef","saveRootEl","div","Container","data_1","parse","data_2","App","useState","alt","setAlt","onClick","console","log","countryId","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.a128c390.chunk.js","sourcesContent":["import Control from 'ol/control/Control';\nimport {inAndOut} from 'ol/easing';\n\n// Copied from `ol.inherits` method implementation:\nconst ol_inherits = function(childCtor: any, parentCtor: any) {\n  childCtor.prototype = Object.create(parentCtor.prototype);\n  childCtor.prototype.constructor = childCtor;\n};\n\n// Returns the contructor for the \"reset\" button in `openlayers` map. that will\n// restore the map to the `defaultZoomLevel` and centered at\n// `defaultCenterCoords`. `defaultCenterCoords` need to be already transformed.\nconst getZoomPanReset = (\n  defaultZoomLevel: number,\n  defaultCenterCoords: [number, number]) => {\n\n  // Taken from\n  // https://github.com/openlayers/openlayers/blob/4255e81b930fa1d9fd13bfc078a7a00cc315c769/examples/custom-controls.js\n  function ResetControl(this: any, options: any = {}) {\n    const button = document.createElement('button');\n    button.innerHTML = 'RESET';\n\n    const that = this;\n    const zoomToFitUSA = function() {\n      const view = that.getMap().getView();\n      view.animate({\n        zoom: defaultZoomLevel,\n        center: defaultCenterCoords,\n        duration: 350,\n        easing: inAndOut,\n      });\n    };\n\n    button.addEventListener('click', zoomToFitUSA);\n    button.addEventListener('touchstart', zoomToFitUSA);\n\n    const element = document.createElement('div');\n    element.className = `geoMapZoomContainer geoMapContainer ol-control ol-unselectable`;\n    element.appendChild(button);\n\n    Control.call(this, {\n      element, target: options.target,\n    });\n  }\n  ol_inherits(ResetControl, Control);\n\n  return ResetControl;\n};\n\nexport default getZoomPanReset;\n","import {defaults as controlDefaults} from 'ol/control';\nimport getResetControl from './mapResetZoomPan';\n\n// Give the map a standard set of controls: zoom in, zoom out and reset that\n// shares the same styling as all the non-map graphs:\nexport default function(defaultZoomLevel: number, defaultCenterCoords: [number, number]) {\n  // Reset zoom/pan button:\n  const ResetControl = getResetControl(defaultZoomLevel, defaultCenterCoords);\n\n  return controlDefaults({\n  attribution: false,\n  zoomOptions: {\n    className: 'geoMapContainer',\n    },\n  }).extend([\n    new (ResetControl as any)(),\n  ]);\n}\n","import GeoJSON from 'ol/format/GeoJSON';\nimport VectorLayer from 'ol/layer/Vector';\nimport OlMap from 'ol/Map';\nimport {transform as projTransform} from 'ol/proj';\nimport VectorSource from 'ol/source/Vector';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Style from 'ol/style/Style';\nimport View from 'ol/View';\nimport getMapControls from './getMapControls';\nimport {\n  IDataProps,\n  ISizeProps,\n} from './index';\n\nexport const primaryCountryColor = '#e8c258';\n\nconst defaultCenterCoords = projTransform([0, 20], 'EPSG:4326', 'EPSG:3857');\nconst defaultZoomLevel = 2;\n\nconst defaultMapFillColor = 'white';\nconst defaultMapStrokeColor = '#8AABAB';\n\nexport const setSizeAndSetUpMap = (\n    size: ISizeProps,\n    el: HTMLElement | null) => {\n\n  const {width, height} = size;\n  if (el !== null && width !== undefined && height !== undefined) {\n    el.setAttribute('width', `${width}px`);\n    el.setAttribute('height', `${height}px`);\n    const view = new View({\n      center: defaultCenterCoords,\n      zoom: defaultZoomLevel,\n      minZoom: 1.5,\n    });\n\n    const map = new OlMap({\n      target: el,\n      controls: getMapControls(defaultZoomLevel, defaultCenterCoords),\n      view,\n    });\n    return map;\n  }\n};\n\nexport const drawVectorLayer = ({geoJSONData, countryData}: IDataProps) => {\n\n    const parsedFeatures = new GeoJSON({featureProjection: 'EPSG:3857'}).readFeatures(geoJSONData);\n    const featureSource = new VectorSource({\n      features: parsedFeatures,\n      wrapX: false,\n    });\n    const vectorLayer = new VectorLayer({\n      source: featureSource,\n      style(feature: any) {\n        const featureId = feature.getId();\n\n        const retrievedDatumForCountry = countryData[featureId];\n        let color: string;\n        if (retrievedDatumForCountry === undefined) {\n          color = defaultMapFillColor;\n        } else {\n          if (retrievedDatumForCountry.isPrimaryCountry === true) {\n            color = primaryCountryColor;\n          } else {\n            color = retrievedDatumForCountry.color;\n          }\n        }\n\n        const style = new Style({\n          fill: new Fill({color}),\n          stroke: new Stroke({\n            color: defaultMapStrokeColor,\n            width: 1,\n          }),\n        });\n        return style;\n      },\n    });\n    return vectorLayer;\n};\n\n// Upper/lower bounds of color range of map:\nexport const colorRangeStart = '#B1E0BB';\nexport const colorRangeEnd = '#0A4486';\n\n// For example, if\n// `colorSpectrumStartAsPercentageOfTotalOrdersOfMagnitudeDifference` is 1/2 and\n// the `nice`-d domain starts at 10^3 and ends at 10^7 then the color spectrum\n// starts at 10^5 because 5 is midway between 3 and 7:\nexport const colorSpectrumStartAsPercentageOfTotalOrdersOfMagnitudeDifference = 0.5;\nexport const colorSpectrumEndAsPercentageOfTotalOrdersOfMagnitudeDifference = 0.9;\n\nexport const getOrdersOfMagnitudeDifference = (domainStart: number, domainEnd: number) => {\n  // Note: the `log10` operations will produce integers because `domainStart`\n  // and `domainEnd` will be powers of ten because they have been `nice`-d by `d3`:\n  const domainStartOrderOfMagnitude = Math.log10(domainStart);\n  const domainEndOrderOfMagnitude = Math.log10(domainEnd);\n  return domainEndOrderOfMagnitude - domainStartOrderOfMagnitude;\n};\n","import throttle from 'lodash/throttle';\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  drawVectorLayer as actuallyDrawVectorLayer,\n  setSizeAndSetUpMap as actuallySetSizeAndSetupMap,\n} from './Utils';\n\nconst mapBackgroundColor = 'rgb(245,245,245)';\n\ninterface GenericGeoJSONFeature<G extends GeoJSON.GeometryObject, T> extends GeoJSON.Feature<G> {\n    properties: T;\n}\n\ninterface FeatureCollection<G\n    extends GeoJSON.GeometryObject, T> extends GeoJSON.FeatureCollection<G> {\n    features: Array<GenericGeoJSONFeature<G, T>>;\n}\n\ntype IGeoJSONData = FeatureCollection<GeoJSON.MultiPolygon, {}>;\n\nexport type ICountryDatumDisjoint = {\n  isPrimaryCountry: true;\n} | {\n  isPrimaryCountry: false;\n  value: number;\n  percentage: number;\n  color: string;\n};\n\nexport type ICountryDatum = {\n  id: number\n  shortLabel: string;\n  longLabel: string;\n  regionColor: string;\n  regionName: string;\n} & ICountryDatumDisjoint;\n\nexport interface ITooltipInfo {\n  id: number;\n  x: number;\n  y: number;\n}\n\nconst throttleWait = 16; // in ms\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  outline: 1px solid #ccc;\n  background-color: ${mapBackgroundColor};\n`;\n\ninterface IInteractiveProps {\n  saveRootEl: (el: HTMLElement | null) => void;\n  hideTooltip: () => void;\n  showTooltip: (info: ITooltipInfo) => void;\n  showDetailOverlay: (countryId: number) => void;\n}\n\nexport interface ISizeProps {\n  width: number | undefined;\n  height: number | undefined;\n}\n\nexport type CountryData = Record<string, ICountryDatum>;\n\nexport interface IDataProps {\n  geoJSONData: IGeoJSONData;\n  countryData: CountryData;\n}\n\nexport type IProps = IDataProps & ISizeProps & IInteractiveProps;\n\nexport default class extends React.Component<IProps> {\n\n  private el: HTMLElement | null = null;\n  private rememberEl = (el: HTMLElement | null) => {\n    this.el = el;\n    this.props.saveRootEl(el);\n  }\n\n  //#region Lifecycle methods\n  componentDidMount() {\n    const props = this.props;\n    this.setSizeAndSetupMap(props);\n    this.drawVectorLayer(props);\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    const nextProps = this.props;\n    if (prevProps !== nextProps) {\n      if (nextProps.width !== prevProps.width ||\n          nextProps.height !== prevProps.height) {\n\n        this.setSizeAndSetupMap(nextProps);\n        this.drawVectorLayer(nextProps);\n      } else if (nextProps.countryData !== prevProps.countryData) {\n        this.drawVectorLayer(nextProps);\n      }\n    }\n  }\n  //#endregion\n\n  private olMap: any;\n  private setSizeAndSetupMap(props: IProps) {\n    if (this.olMap !== undefined) {\n      this.olMap.setTarget(null);\n    }\n    this.olMap = undefined;\n\n    const {width, height} = props;\n\n    const olMap = actuallySetSizeAndSetupMap({width, height}, this.el);\n\n    olMap.on('pointermove', (evt: any) => {\n      const pixel = olMap.getEventPixel(evt.originalEvent);\n      this.onMouseEnterFeature(pixel, evt.originalEvent, props);\n    });\n    olMap.on('click', (evt: any) => {\n      const pixel = olMap.getEventPixel(evt.originalEvent);\n      this.onMouseClickFeature(pixel, props);\n    });\n    this.olMap = olMap;\n  }\n\n  private vectorLayer: any;\n  private drawVectorLayer(props: IProps) {\n    if (this.olMap !== undefined) {\n      const newVectorLayer = actuallyDrawVectorLayer(props);\n      if (this.vectorLayer !== undefined) {\n        this.olMap.removeLayer(this.vectorLayer);\n      }\n      this.olMap.addLayer(newVectorLayer);\n      this.vectorLayer = newVectorLayer;\n    }\n  }\n\n  //#region Mouse event handlers:\n  // Needed to hide any currently visible tooltip when the mouse exits the map\n  // `div` through a landmass that's up against the `div` boundary\n  private onMouseLeaveMap = () => {\n    this.sendOutTooltipInfo.cancel();\n    this.props.hideTooltip();\n  }\n  /* Start of methods relatd to mouse events */\n  private hovered: number | undefined = undefined;\n  private x: number | undefined = undefined;\n  private y: number | undefined = undefined;\n\n  private actuallySendOutTooltipInfo = () => {\n    if (this.hovered !== undefined && this.x !== undefined && this.y !== undefined) {\n      const info: ITooltipInfo = {\n        id: this.hovered,\n        x: this.x,\n        y: this.y,\n      };\n      this.x = undefined;\n      this.y = undefined;\n      this.props.showTooltip(info);\n    }\n  }\n\n  private sendOutTooltipInfo = throttle(() => {\n    this.actuallySendOutTooltipInfo();\n  }, throttleWait);\n\n  private onMouseEnterFeature = (\n      pixel: any,\n      {offsetX, offsetY, target}: MouseEvent,\n      {countryData, hideTooltip}: IProps,\n    ) => {\n    let tagName: string | null;\n    if (target) {\n      const htmlTarget = target as any;\n      tagName = htmlTarget.tagName;\n    } else {\n      tagName = null;\n    }\n    if (this.olMap !== undefined) {\n      const feature = this.olMap.forEachFeatureAtPixel(pixel, (eachFeature: any) => eachFeature);\n      // `feature` can be `undefined` if the mouse is over areas without vector layer e.g. the ocean:\n      // Only show tooltip when on the CANVAS as other elements, like zoom controls,\n      // cause weird behavior\n      if (feature && tagName === 'CANVAS') {\n        const featureId = feature.getId();\n        this.hovered = featureId;\n        this.x = offsetX;\n        this.y = offsetY;\n\n        // Only trigger tooltip for non-primary country or country for which we have data:\n        const retrievedFeatureData = countryData[featureId];\n        if (retrievedFeatureData !== undefined &&\n            retrievedFeatureData.isPrimaryCountry === false) {\n          this.sendOutTooltipInfo();\n        }\n      } else {\n        if (this.hovered !== undefined) {\n          // If this is the first time the mouse moves away from land, send\n          // signal to unhighlight the current country. Need this check because it's\n          // possible for `highlighted` to go from `undefined` to `undefined`\n          // e.g. when the mouse moves over the ocean:\n          hideTooltip();\n        }\n        this.hovered = undefined;\n      }\n\n    }\n  }\n\n  private onMouseClickFeature = (pixel: any, {showDetailOverlay}: IProps) => {\n    if (this.olMap !== undefined) {\n      const feature = this.olMap.forEachFeatureAtPixel(pixel, (eachFeature: any) => eachFeature);\n      // `feature` can be `undefined` if the mouse is over areas without vector layer e.g. the ocean:\n      if (feature) {\n        const featureId = feature.getId();\n        this.hovered = featureId;\n        showDetailOverlay(featureId);\n      }\n    }\n  }\n\n  //#endregion\n\n  render() {\n    return (\n      <Root ref={this.rememberEl} onMouseLeave={this.onMouseLeaveMap}/>\n    );\n  }\n}\n","import {css} from 'styled-components/macro';\n\nconst styles = css`\n  /* Undo openlayer's default styling: */\n  :global(.ol-control) {\n    background-color: transparent;\n  }\n\n  :global(.ol-control):hover {\n    background-color: transparent;\n  }\n\n  :global(.ol-control) button {\n    margin: 0;\n  }\n\n  .container,\n  .geoMapContainer {\n    --container-top: 10px;\n    --container-right: 10px;\n    --button-size: 1.375rem;\n    --button-margin-bottom: 5px;\n\n    position: absolute;\n    top: var(--container-top);\n    right: var(--container-right);\n\n    & button {\n      width: 80px;\n      height: 22px;\n      border: 1px solid rgb(136, 136, 153);\n      border-radius: 2px;\n      cursor: pointer;\n      display: -webkit-box;\n      display: -ms-flexbox;\n      display: flex;\n      -webkit-box-pack: center;\n      -ms-flex-pack: center;\n      justify-content: center;\n      -webkit-box-align: center;\n      -ms-flex-align: center;\n      align-items: center;\n      color: rgb(136, 136, 153);\n      opacity: 0.75;\n      margin-bottom: 10px;\n      font-weight: bold;\n      background-color: #fff;\n      font-size: 0.6rem;\n      text-transform: uppercase;\n\n      &:hover {\n        opacity: 1;\n        background-color: white;\n      }\n    }\n  }\n\n  .geoMapContainer {\n    & button::after {\n      content: 'ZOOM';\n      margin-left: 0.25rem;\n    }\n  }\n\n  /* This is needed so that the \"reset\" button lines up below the zoom in/out buttons: */\n  .zoomContainer {\n    composes: container;\n    top: calc(var(--container-top) + var(--button-size) * 2 + var(--button-margin-bottom) * 2);\n    right: var(--container-right);\n  }\n\n  .geoMapZoomContainer {\n    composes: container;\n    top: calc(var(--container-top) + var(--button-size) * 2 + var(--button-margin-bottom) * 2);\n    right: var(--container-right);\n    margin-top: 10px;\n  }\n`;\n\nexport default styles;\n","import {\n  scaleLinear,\n  scaleLog,\n} from 'd3-scale';\nimport first from 'lodash/first';\nimport last from 'lodash/last';\nimport range from 'lodash/range';\nimport React from 'react';\nimport styled from 'styled-components';\nimport {\n  colorRangeEnd,\n  colorRangeStart,\n  colorSpectrumEndAsPercentageOfTotalOrdersOfMagnitudeDifference as spectrumEndPct,\n  colorSpectrumStartAsPercentageOfTotalOrdersOfMagnitudeDifference as spectrumStartPct,\n  getOrdersOfMagnitudeDifference,\n  primaryCountryColor,\n} from './Utils';\nimport {\n  format,\n} from 'd3-format';\n\ninterface ILegendData {\n  domainStart: number;\n  domainSpectrumStart: number;\n  domainSpectrumEnd: number;\n  domainEnd: number;\n  rangeStart: string;\n  rangeEnd: string;\n}\n\nconst graphHeight = 75; // in `vh`\n\n// Taken from https://stackoverflow.com/a/22885197:\nconst log10 = Math.log(10);\nconst getSignificantDigitCount = (n: number) => {\n    n = Math.abs(+String(n).replace('.', '')); //remove decimal and make positive\n    if (n === 0) {\n      return 0;\n    }\n    while (n !== 0 && n % 10 === 0) {\n      n /= 10; //kill the 0s at the end of n\n    }\n\n    return Math.floor(Math.log(n) / log10) + 1; //get number of digits\n};\n\n// Format monetary sums into nice number with as many significant digits as in\n// the input not exceeding 3. Also replace the `G` prefix with `B` because `B`\n// makes more sense for money sums. The other prefixes are fine:\nexport const formatTradeValue = (input: number) => {\n  const maxNumSignificantDigits = 3;\n  const numSignificantDigitsInInput = getSignificantDigitCount(input);\n  const numSignificantDigitsInOutput = (numSignificantDigitsInInput <= maxNumSignificantDigits) ?\n                                        numSignificantDigitsInInput :\n                                        maxNumSignificantDigits;\n  return format(`$.${numSignificantDigitsInOutput}s`)(input).replace('G', 'B');\n};\n\n\nconst horizontalMargin = 5; // in percentage\nconst width = 100 - 2 * horizontalMargin; // in percentage;\n\n// Height of bar as percentage of graph's total height:\nconst barHeightPercentage = 0.02;\nconst barHeight = graphHeight * barHeightPercentage; // in `vh`:\nconst textHeight = 1; // in rem\nconst totalHeight = `calc(${barHeight}vh + ${textHeight}rem)`;\n\nconst Root = styled.div`\n  position: absolute;\n  bottom: 0.5rem;\n  left: ${horizontalMargin}%;\n  width: ${width}%;\n  height: ${totalHeight};\n  pointer-events: none;\n`;\n\nconst TickValue = styled.div`\n  transform: translateX(-50%);\n  position: absolute;\n  top: ${barHeight}vh;\n  font-size: 0.7rem;\n  margin-top: 1vh;\n`;\nconst TickMark = styled.div`\n  position: absolute;\n  top: 0;\n  height: ${barHeight}vh;\n  background-color: white;\n  width: 2px;\n  transform: translateX(-50%);\n`;\n\nconst SelectedCountry = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  transform: translateY(calc(-100% - 0.5rem));\n  font-size: 0.9rem;\n  display: flex;\n  align-items: center;\n\n  &::before {\n    content: '';\n    width: 1.1rem;\n    height: 1.1rem;\n    display: inline-block;\n    margin-right: 0.5rem;\n    background-color: ${primaryCountryColor};\n  }\n`;\n\nconst legendStart = 0;\nconst legendSpectrumStart = spectrumStartPct * 100;\nconst legendSpectrumEnd = spectrumEndPct * 100;\nconst legendEnd = 100;\nconst getCSSLinearGradient = () => {\n  const spectrumScale = scaleLinear<string, string>()\n                          .domain([legendSpectrumStart, legendSpectrumEnd])\n                          .range([colorRangeStart, colorRangeEnd]);\n  const spectrumGradientString = range(legendSpectrumStart, legendEnd + 1).map(\n    value => `${spectrumScale(value)} ${value}%`,\n  );\n  const spectrumStartSring = `${colorRangeStart} 0`;\n  const spectrumEndString = `${colorRangeEnd} 100%`;\n  const linearGradientString = [spectrumStartSring, ...spectrumGradientString, spectrumEndString].join(', ');\n  return linearGradientString;\n};\n\nconst ColorBar = styled.div`\n  width: 100%;\n  height: ${barHeight}vh;\n  border: 1px solid white;\n  background-image: linear-gradient(to right, ${getCSSLinearGradient()});\n`;\n\nexport const getScaleAndTicksForTickLabels = (\n    domainStart: number, domainEnd: number, legendStartX: number, legendEndX: number,\n  ) => {\n\n  const scale = scaleLog<number, number>()\n                  .domain([domainStart, domainEnd])\n                  .range([legendStartX, legendEndX]);\n\n  // Request the number of ticks equal to the difference of orders of magnitude\n  // between the two endpoints will ensure that `de` will return one tick for\n  // every power of ten:\n  const numberOfTicks = getOrdersOfMagnitudeDifference(domainStart, domainEnd);\n\n  const rawTickValues = scale.ticks(numberOfTicks);\n  // If tick values do not include the start and end points, include them:\n  let tickValues = rawTickValues;\n  if (first(rawTickValues) !== domainStart) {\n    tickValues = [domainStart, ...tickValues];\n  }\n  if (last(rawTickValues) !== domainEnd) {\n    tickValues = [...tickValues, domainEnd];\n  }\n  return {\n    scale, tickValues,\n  };\n};\n\nexport default class extends React.PureComponent<ILegendData & { showSelectedCountry: boolean }, {}> {\n  render() {\n    const {domainStart, domainEnd, showSelectedCountry} = this.props;\n    const {scale, tickValues} = getScaleAndTicksForTickLabels(\n      domainStart, domainEnd, legendStart, legendEnd,\n    );\n\n    const tickValueElems = tickValues.map((value: number) => {\n      const style = {\n        left: `${scale(value)}%`,\n      };\n      return (\n        <TickValue style={style} key={value}>{formatTradeValue(value)}</TickValue>\n      );\n    });\n\n    const tickElems = tickValues.map((value: number) => {\n      const style = {\n        left: `${scale(value)}%`,\n      };\n      return (\n        <TickMark style={style} key={value}/>\n      );\n    });\n\n    const selectedCountryLabel = showSelectedCountry === true\n      ? <SelectedCountry>Selected Country</SelectedCountry> : null;\n\n    return (\n      <Root>\n        {selectedCountryLabel}\n        <ColorBar/>\n        {tickElems}\n        {tickValueElems}\n      </Root>\n    );\n  }\n}\n","import React, {useRef} from 'react'\nimport Chart, {CountryData, ITooltipInfo} from './chart';\nimport styles from './chart/styling';\nimport raw from 'raw.macro';\nimport styled from 'styled-components/macro';\nimport Legend from './chart/Legend';\n\nconst Root = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  ${styles}\n`;\n\nconst geoJSONData = JSON.parse(raw('./world_map_naturalearth_ashkyd_clean_geo.json'));\n\ninterface Props {\n  data: CountryData;\n  hideTooltip: () => void;\n  showTooltip: (info: ITooltipInfo) => void;\n  onCountryClick: (countryId: number) => void;\n  domainEnd: number;\n  domainSpectrumEnd: number;\n  domainSpectrumStart: number;\n  domainStart: number;\n  rangeEnd: string;\n  rangeStart: string;\n  showSelectedCountry: boolean;\n}\n\nconst GeoMap = (props: Props) => {\n  const {\n    data, hideTooltip, showTooltip, onCountryClick,\n    domainEnd, domainSpectrumEnd, domainSpectrumStart, domainStart,\n    rangeEnd, rangeStart, showSelectedCountry,\n  } = props;\n  const chartRootEl = useRef<HTMLDivElement | null>(null);\n\n  const rememberChartRootEl = (el: HTMLDivElement | null) => chartRootEl.current = el;\n\n  return (\n    <Root ref={chartRootEl}>\n      <Chart\n        saveRootEl={rememberChartRootEl}\n        hideTooltip={hideTooltip}\n        showTooltip={showTooltip}\n        showDetailOverlay={onCountryClick}\n        geoJSONData={geoJSONData}\n        width={800} height={640}\n        countryData={data}\n      />\n      <Legend\n        domainEnd={domainEnd}\n        domainSpectrumEnd={domainSpectrumEnd}\n        domainSpectrumStart={domainSpectrumStart}\n        domainStart={domainStart}\n        rangeEnd={rangeEnd}\n        rangeStart={rangeStart}\n        showSelectedCountry={showSelectedCountry}\n      />\n    </Root>\n  );\n}\n\nexport default GeoMap;\n","import React, {useState} from 'react'\n\nimport GeoMap from 'atlas-geomap'\nimport raw from 'raw.macro';\n\nimport styled from 'styled-components/macro';\n\nconst Root = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column:\n  align-items: center;\n  justify-content: center;\n  background: lightgray;\n`;\n\nconst Container = styled.div`\n  width: 80%;\n  height: 80%;\n  margin: auto;\n  cursor: pointer;\n`;\n\nconst data_1 = JSON.parse(raw('./test-data.json'));\nconst data_2 = JSON.parse(raw('./test-data-2.json'));\n\nconst App = () => {\n  const [alt, setAlt] = useState<boolean>(false);\n\n  return (\n    <Root>\n      <div>\n        <button onClick={() => setAlt(!alt)}>\n          Toggle Data\n        </button>\n      </div>\n      <Container>\n        <GeoMap\n          data={alt ? data_2 : data_1}\n          hideTooltip={() => console.log('hide tooltip')}\n          showTooltip={(info) => console.log(info)}\n          onCountryClick={(countryId) => console.log(countryId)}\n\n          domainEnd={1000000000}\n          domainSpectrumEnd={398107170.55349696}\n          domainSpectrumStart={10000000}\n          domainStart={100000}\n          rangeEnd={\"#0A4486\"}\n          rangeStart={\"#B1E0BB\"}\n          showSelectedCountry={true}\n        />\n      </Container>\n    </Root>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}